<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[]]></title>
  <link href="【Head Frist 设计模式】居然是村长/atom.xml" rel="self"/>
  <link href="【Head Frist 设计模式】居然是村长/"/>
  <updated>2019-11-20T17:43:10+08:00</updated>
  <id>【Head Frist 设计模式】居然是村长/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im">MWeb</generator>

  
  <entry>
    <title type="html"><![CDATA[总结]]></title>
    <link href="【Head Frist 设计模式】居然是村长/%E3%80%90Head%20Frist%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%91%E6%80%BB%E7%BB%93.html"/>
    <updated>2019-11-19T11:50:38+08:00</updated>
    <id>【Head Frist 设计模式】居然是村长/%E3%80%90Head%20Frist%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%91%E6%80%BB%E7%BB%93.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">OO 基础</h2>

<pre><code>抽象
封装
多态
继承
</code></pre>

<h2 id="toc_1">OO 原则</h2>

<pre><code>封装变化
多用组合，少用继承

针对接口编程，不针对实现编程

为交互对象之间的松耦合设计而努力

对扩展开放，对修改关闭
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 1 章 策略模式]]></title>
    <link href="【Head Frist 设计模式】居然是村长/%E3%80%90Head%20Frist%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%91%E7%AC%AC%201%20%E7%AB%A0%20%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html"/>
    <updated>2019-11-19T11:05:41+08:00</updated>
    <id>【Head Frist 设计模式】居然是村长/%E3%80%90Head%20Frist%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%91%E7%AC%AC%201%20%E7%AB%A0%20%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">一、基础</a>
</li>
<li>
<a href="#toc_1">二、实践</a>
<ul>
<li>
<a href="#toc_2">2.1 需求</a>
</li>
<li>
<a href="#toc_3">2.2 代码</a>
</li>
</ul>
</li>
</ul>


<h2 id="toc_0">一、基础</h2>

<pre><code>定义算法族，分别封装起来，让他们之间可以相互替换
让算法的变化独立与使用算法的客户
</code></pre>

<h2 id="toc_1">二、实践</h2>

<h3 id="toc_2">2.1 需求</h3>

<pre><code>设计鸭子

需求 1.0：
样子：黄毛、黑毛、塑料、橡胶？
叫声：嘎嘎、吱吱

需求 2.0
飞：
</code></pre>

<h3 id="toc_3">2.2 代码</h3>

<ul>
<li>Duck</li>
</ul>

<pre><code>@interface Duck : NSObject

@property (nonatomic, strong) DuckVoiceBehavior *say;
@property (nonatomic, strong) DuckFlyBehavior *fly;

- (void)display;

@end


@implementation Duck

- (void)display {
    NSLog(@&quot;鸭子的标准外观&quot;);
}

- (DuckVoiceBehavior *)say {
    if (!_say) {
        _say = [[DuckVoiceBehavior alloc] init];
    }
    return _say;
}

- (DuckFlyBehavior *)fly {
    if (!_fly) {
        _fly = [[DuckFlyBehavior alloc] init];
    }
    return _fly;
}

@end
</code></pre>

<ul>
<li>DuckVoiceBehavior</li>
</ul>

<pre><code>@interface DuckVoiceBehavior : NSObject

- (void)sayGaGa;

- (void)sayZhiZhi;

@end


@implementation DuckVoiceBehavior

- (void)sayGaGa {
    NSLog(@&quot;GaGa&quot;);
}

- (void)sayZhiZhi {
    NSLog(@&quot;ZhiZhi&quot;);
}

@end
</code></pre>

<ul>
<li>DuckFlyBehavior</li>
</ul>

<pre><code>@interface DuckFlyBehavior : NSObject

- (void)flySlowly;

- (void)flyDisable;

@end


@implementation DuckFlyBehavior

- (void)flySlowly {
    NSLog(@&quot;fly slowly&quot;);
}

- (void)flyDisable {
    NSLog(@&quot;can not fly&quot;);
}

@end
</code></pre>

<ul>
<li>YellowDuck</li>
</ul>

<pre><code>@interface YellowDuck : Duck

@end

@implementation YellowDuck

- (void)display {
    NSLog(@&quot;我是小黄鸭，调试小黄鸭&quot;);
}

@end
</code></pre>

<ul>
<li>RedDuck</li>
</ul>

<pre><code>@interface RedDuck : Duck

@end


@implementation RedDuck

- (void)display {
    NSLog(@&quot;红色羽毛的鸭子&quot;);
}

@end
</code></pre>

<ul>
<li>使用</li>
</ul>

<pre><code>- (void)viewDidLoad {
    [super viewDidLoad];
    
    YellowDuck *yellowDuck = [[YellowDuck alloc] init];
    [yellowDuck display];
    [yellowDuck.say sayZhiZhi];
    [yellowDuck.fly flyDisable];
    
    RedDuck *redDuck = [[RedDuck alloc] init];
    [redDuck display];
    [redDuck.say sayGaGa];
    [redDuck.fly flySlowly];
}
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 2 章 观察者模式]]></title>
    <link href="【Head Frist 设计模式】居然是村长/%E3%80%90Head%20Frist%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%91%E7%AC%AC%202%20%E7%AB%A0%20%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.html"/>
    <updated>2019-11-20T16:42:55+08:00</updated>
    <id>【Head Frist 设计模式】居然是村长/%E3%80%90Head%20Frist%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%91%E7%AC%AC%202%20%E7%AB%A0%20%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">一、基础</a>
</li>
<li>
<a href="#toc_1">二、实践</a>
<ul>
<li>
<a href="#toc_2">2.1 需求</a>
</li>
<li>
<a href="#toc_3">2.2 代码</a>
</li>
</ul>
</li>
</ul>


<h2 id="toc_0">一、基础</h2>

<pre><code>在对象之间定义一对多的依赖，
这样一来
当一个对象改变状态，依赖它的对象都会收到通知
并自动更新
</code></pre>

<h2 id="toc_1">二、实践</h2>

<h3 id="toc_2">2.1 需求</h3>

<pre><code>设计天气信息实时刷新

天气监测站会按时推送信息（天气，温度）
需要一个软件，接受信息，并展示 3 个信息面板
要求可以实时刷新

迭代：
补充信息：气压
新增一个信息面板
</code></pre>

<h3 id="toc_3">2.2 代码</h3>

<ul>
<li>WeatherStation</li>
</ul>

<pre><code>@interface WeatherStation : NSObject

// 模拟连接
- (void)connect;

@end


NSString *const WeatherStationInfoChangeNotification = @&quot;WeatherStationNotification&quot;;

@implementation WeatherStation

- (void)connect {
    [self testSendWeatherInfo];
}

- (void)testSendWeatherInfo {
    NSDictionary *weatherInfo = @{@&quot;weather&quot;:@&quot;大雪&quot;, @&quot;temperature&quot;:@(arc4random()%50)};
    [[NSNotificationCenter defaultCenter] postNotificationName:WeatherStationInfoChangeNotification object:nil userInfo:weatherInfo];
    
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(3 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        [self testSendWeatherInfo];
    });
}

@end
</code></pre>

<ul>
<li>使用</li>
</ul>

<pre><code>@interface ViewController ()

@property (nonatomic, strong) WeatherStation *weatherStation;

@end

@implementation ViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(weatherInfoChange:) name:WeatherStationInfoChangeNotification object:nil];
    
    self.weatherStation = [[WeatherStation alloc] init];
    [self.weatherStation connect];
}

- (void)weatherInfoChange:(NSNotification *)n {
    NSDictionary *dic = n.userInfo;
    NSString *weather = dic[@&quot;weather&quot;];
    NSNumber *temperature = dic[@&quot;temperature&quot;];
    
    NSLog(@&quot;weather:%@&quot;, weather);
    NSLog(@&quot;temperature:%@&quot;, temperature);
}

- (void)dealloc {
    [[NSNotificationCenter defaultCenter] removeObserver:self name:WeatherStationInfoChangeNotification object:nil];
}

@end
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第 3 章 装饰器模式]]></title>
    <link href="【Head Frist 设计模式】居然是村长/%E3%80%90Head%20Frist%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%91%E7%AC%AC%203%20%E7%AB%A0%20%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F.html"/>
    <updated>2019-11-20T16:42:55+08:00</updated>
    <id>【Head Frist 设计模式】居然是村长/%E3%80%90Head%20Frist%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%91%E7%AC%AC%203%20%E7%AB%A0%20%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">一、基础</a>
</li>
<li>
<a href="#toc_1">二、实践</a>
<ul>
<li>
<a href="#toc_2">2.1 需求</a>
</li>
<li>
<a href="#toc_3">2.2 代码</a>
</li>
</ul>
</li>
</ul>


<h2 id="toc_0">一、基础</h2>

<pre><code>动态地将责任附加到对象上
想要扩展功能，装饰者提供有别于继承到另一种选择
</code></pre>

<h2 id="toc_1">二、实践</h2>

<h3 id="toc_2">2.1 需求</h3>

<pre><code>咖啡馆点单，商品价格计算

主要分类：咖啡、奶茶、星冰乐。。。
配料：摩卡、牛奶、糖。。。

迭代
增加杯型：小杯、大杯
</code></pre>

<h3 id="toc_3">2.2 代码</h3>

<ul>
<li>Beverage</li>
</ul>

<pre><code>// 饮料
@interface Beverage : NSObject

// 名称
@property (nonatomic, copy) NSString *name;

// 价格
- (float)coast;

@end


@implementation Beverage

- (NSString *)name {
    return @&quot;&quot;;
}

- (float)coast {
    return 0.0;
}

@end
</code></pre>

<ul>
<li>CondimentDecorator</li>
</ul>

<pre><code>// 配料装饰器
@interface CondimentDecorator : Beverage

- (instancetype)initWithBeverage:(Beverage *)beverage;

@property (nonatomic, strong) Beverage *tempBeverage;

@end


@implementation CondimentDecorator

- (instancetype)initWithBeverage:(Beverage *)beverage {
    self = [super init];
    if (self) {
        self.tempBeverage = beverage;
    }
    return self;
}

@end
</code></pre>

<ul>
<li>Category</li>
</ul>

<pre><code>// 深度烘焙，基础款 11 元
@interface DarkRoast : Beverage

@end


@implementation DarkRoast

- (NSString *)name {
    return @&quot;深度烘培&quot;;
}

- (float)coast {
    return 11.0;
}

@end


-----


// 奶茶，基础款 8 元
@interface MileTee : Beverage

@end


@implementation MileTee

- (NSString *)name {
    return @&quot;奶茶&quot;;
}

- (float)coast {
    return 8.0;
}
</code></pre>

<ul>
<li>Condiment</li>
</ul>

<pre><code>// 摩卡：+2 元/份
@interface Mocha : CondimentDecorator

@end


@implementation Mocha

- (NSString *)name {
    return [NSString stringWithFormat:@&quot;%@+%@&quot;, self.tempBeverage.name, @&quot;摩卡&quot;];
}

- (float)coast {
    return self.tempBeverage.coast + 2.;
}

@end


---


// 牛奶：+3 元/份
@interface Milk : CondimentDecorator

@end


@implementation Milk

- (NSString *)name {
    return [NSString stringWithFormat:@&quot;%@+%@&quot;, self.tempBeverage.name, @&quot;牛奶&quot;];
}

- (float)coast {
    return self.tempBeverage.coast + 3.;
}

@end
</code></pre>

<ul>
<li>CupSize</li>
</ul>

<pre><code>// 小杯 +1 元
@interface CupSizeSmall : CondimentDecorator

@end


@implementation CupSizeSmall

- (NSString *)name {
    return [NSString stringWithFormat:@&quot;%@+%@&quot;, self.tempBeverage.name, @&quot;小杯&quot;];
}

- (float)coast {
    return self.tempBeverage.coast + 1.;
}

@end


-------


// 大杯 +2 元
@interface CupSizeBig : CondimentDecorator

@end


@implementation CupSizeBig

- (NSString *)name {
    return [NSString stringWithFormat:@&quot;%@+%@&quot;, self.tempBeverage.name, @&quot;大杯&quot;];
}

- (float)coast {
    return self.tempBeverage.coast + 2.;
}

@end
</code></pre>

<ul>
<li>使用</li>
</ul>

<pre><code>    Beverage *darkRoast = [[DarkRoast alloc] init];
    darkRoast = [[Mocha alloc] initWithBeverage:darkRoast];
    darkRoast = [[Mocha alloc] initWithBeverage:darkRoast];
    darkRoast = [[Milk alloc] initWithBeverage:darkRoast];
    darkRoast = [[CupSizeBig alloc] initWithBeverage:darkRoast];
    
    NSLog(@&quot;\n%@\n价格：%.2f&quot;, darkRoast.name, darkRoast.coast);
</code></pre>

]]></content>
  </entry>
  
</feed>
